//-> EN ENTIDAD
	...	
	public void accionar(){
		this.movimiento.mover();
	}	
	...

//-> EN ENEMIGO
	...	
	Enemigo (){
		...
		movimiento = new vertical_loop(this,vertical.ABAJO);
	}

//-> EN PREMIO
	...	
	Premio(){
		...
		movimiento = new vertical(this,vertical.ABAJO);
	}

//-> EN PROYECTIL SANITARIO
	...	
	Proyectil_sanitario(){
		...
		movimiento = new vertical(this,vertical.ARRIBA);
	}

//-> EN PROYECTIL PARTICULA_v
	...	
	Particula_v(){
		...
		movimiento = new vertical(this,vertical.ABAJO);
	}

//-> EN JUGADOR
	...	
	Jugador(){
		...
		movimiento = new vertical(this,horizontal.QUIETO);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////

//-> EN ESTRATEGIAMOVIMIENTO
	
	...
	EstrategiaMovimiento(Entidad e, int d)
	{
		this.e  = e
		this.d = d; ;
	}
	
	int getDireccion()
	{
		return direccion;
	}
	
	void setDireccion(int d)
	{
		this.direccion = d;
	}
	
	abstract void mover();
}


public class MovimientoVertical extends EstrategiaMovimiento
{
	public static final int ABAJO = 1;
	public static final int ARRIBA = -1;
	
	public MovimientoVertical(E, int d)
	{
		super(e, d);
	}
	
	public void mover()
	{
		Grafico g = this.e.getGrafico();
		g.setPosition(g.getX(), g.getY() + direccion * e.getVelocidad());
	}
}


////////////////////////////////////////////////////////////////////////////////////

//-> MovimientoHorizontal
	static final int DERECHA = 1;
	static final int IZQUIERDA = -1;
	static final int QUIETO = 0;
	
	MovimientoVertical(Entidad e, int d)	{
		super(e, d);
	}
	
	void mover(){
		Grafico g = this.e.getGrafico();
		g.setPosition(g.getX() direccion * e.getVelocidad(), g.getY());
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////

oyenteTeclaIzquierda()
{
	Jugador.getEstrategiaMovimiento.setDireccion(MovimientoHorizontal.IZQUIERDA);
	jugador.mover();
}












